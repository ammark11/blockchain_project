{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Neo\\\\Music\\\\bs\\\\blockchain_project\\\\client\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Line, Pie } from 'react-chartjs-2';\nimport { MapContainer, TileLayer, Marker } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [nodeCount, setNodeCount] = useState(0);\n  const [averageBlockTime, setAverageBlockTime] = useState(0);\n  const [transactionCount, setTransactionCount] = useState(0);\n  const [blockchainSize, setBlockchainSize] = useState(0);\n  const [transactionData, setTransactionData] = useState({});\n  const [nodeLocations, setNodeLocations] = useState([]);\n  const [miningInfo, setMiningInfo] = useState({\n    difficulty: 0,\n    hashRate: 0,\n    nextDifficulty: 0\n  });\n  useEffect(() => {\n    // Fetch data here. Replace with your actual API endpoints and data processing logic\n    // Example:\n    axios.get('/api/nodes/count').then(response => setNodeCount(response.data.count));\n    axios.get('/api/blockchain/stats').then(response => {\n      // Process and set data for averageBlockTime, transactionCount, blockchainSize\n    });\n    axios.get('/api/transactions/daily').then(response => setTransactionData(processTransactionData(response.data)));\n    axios.get('/api/nodes/locations').then(response => setNodeLocations(response.data.locations));\n    axios.get('/api/mining/info').then(response => setMiningInfo(response.data));\n  }, []);\n\n  // Function to process transaction data for chart\n  const processTransactionData = data => {\n    // Process and return data in a format suitable for react-chartjs-2\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"network-stats\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Nodes: \", nodeCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Average Block Time: \", averageBlockTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Transactions: \", transactionCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Blockchain Size: \", blockchainSize]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"charts\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: transactionData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"node-map\",\n      children: /*#__PURE__*/_jsxDEV(MapContainer, {\n        center: [0, 0],\n        zoom: 2,\n        style: {\n          height: '400px',\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), nodeLocations.map((location, index) => /*#__PURE__*/_jsxDEV(Marker, {\n          position: [location.lat, location.lng]\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mining-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Mining Difficulty: \", miningInfo.difficulty]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Hash Rate: \", miningInfo.hashRate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Next Difficulty Adjustment: \", miningInfo.nextDifficulty]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"BGyPXBWJQ80E4nqfOVs5Q2pksx0=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","Line","Pie","MapContainer","TileLayer","Marker","jsxDEV","_jsxDEV","Dashboard","_s","nodeCount","setNodeCount","averageBlockTime","setAverageBlockTime","transactionCount","setTransactionCount","blockchainSize","setBlockchainSize","transactionData","setTransactionData","nodeLocations","setNodeLocations","miningInfo","setMiningInfo","difficulty","hashRate","nextDifficulty","get","then","response","data","count","processTransactionData","locations","className","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","style","height","width","url","map","location","index","position","lat","lng","_c","$RefreshReg$"],"sources":["C:/Users/Neo/Music/bs/blockchain_project/client/src/pages/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Line, Pie } from 'react-chartjs-2';\r\nimport { MapContainer, TileLayer, Marker } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nconst Dashboard = () => {\r\n    const [nodeCount, setNodeCount] = useState(0);\r\n    const [averageBlockTime, setAverageBlockTime] = useState(0);\r\n    const [transactionCount, setTransactionCount] = useState(0);\r\n    const [blockchainSize, setBlockchainSize] = useState(0);\r\n    const [transactionData, setTransactionData] = useState({});\r\n    const [nodeLocations, setNodeLocations] = useState([]);\r\n    const [miningInfo, setMiningInfo] = useState({ difficulty: 0, hashRate: 0, nextDifficulty: 0 });\r\n\r\n    useEffect(() => {\r\n        // Fetch data here. Replace with your actual API endpoints and data processing logic\r\n        // Example:\r\n        axios.get('/api/nodes/count').then(response => setNodeCount(response.data.count));\r\n        axios.get('/api/blockchain/stats').then(response => {\r\n            // Process and set data for averageBlockTime, transactionCount, blockchainSize\r\n        });\r\n        axios.get('/api/transactions/daily').then(response => setTransactionData(processTransactionData(response.data)));\r\n        axios.get('/api/nodes/locations').then(response => setNodeLocations(response.data.locations));\r\n        axios.get('/api/mining/info').then(response => setMiningInfo(response.data));\r\n    }, []);\r\n\r\n    // Function to process transaction data for chart\r\n    const processTransactionData = (data) => {\r\n        // Process and return data in a format suitable for react-chartjs-2\r\n    };\r\n\r\n    return (\r\n        <div className=\"dashboard\">\r\n            {/* Network Statistics */}\r\n            <div className=\"network-stats\">\r\n                <p>Total Nodes: {nodeCount}</p>\r\n                <p>Average Block Time: {averageBlockTime}</p>\r\n                <p>Total Transactions: {transactionCount}</p>\r\n                <p>Blockchain Size: {blockchainSize}</p>\r\n            </div>\r\n\r\n            {/* Graphs and Charts */}\r\n            <div className=\"charts\">\r\n                <Line data={transactionData} />\r\n                {/* Add more charts as needed */}\r\n            </div>\r\n\r\n            {/* Node Map */}\r\n            <div className=\"node-map\">\r\n                <MapContainer center={[0, 0]} zoom={2} style={{ height: '400px', width: '100%' }}>\r\n                    <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n                    {nodeLocations.map((location, index) => (\r\n                        <Marker key={index} position={[location.lat, location.lng]} />\r\n                    ))}\r\n                </MapContainer>\r\n            </div>\r\n\r\n            {/* Mining Information */}\r\n            <div className=\"mining-info\">\r\n                <p>Mining Difficulty: {miningInfo.difficulty}</p>\r\n                <p>Total Hash Rate: {miningInfo.hashRate}</p>\r\n                <p>Next Difficulty Adjustment: {miningInfo.nextDifficulty}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}