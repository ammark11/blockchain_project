{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Neo\\\\Music\\\\bs\\\\blockchain_project\\\\client\\\\src\\\\pages\\\\Dashboard.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Line, Pie } from 'react-chartjs-2';\nimport { MapContainer, TileLayer, Marker } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nconst Dashboard = () => {\n  const [nodeCount, setNodeCount] = useState(0);\n  const [averageBlockTime, setAverageBlockTime] = useState(0);\n  const [transactionCount, setTransactionCount] = useState(0);\n  const [blockchainSize, setBlockchainSize] = useState(0);\n  const [transactionData, setTransactionData] = useState({});\n  const [nodeLocations, setNodeLocations] = useState([]);\n  const [miningInfo, setMiningInfo] = useState({\n    difficulty: 0,\n    hashRate: 0,\n    nextDifficulty: 0\n  });\n  useEffect(() => {\n    // Fetch data here. Replace with your actual API endpoints and data processing logic\n    // Example:\n    axios.get('/api/nodes/count').then(response => setNodeCount(response.data.count));\n    axios.get('/api/blockchain/stats').then(response => {\n      // Process and set data for averageBlockTime, transactionCount, blockchainSize\n    });\n    axios.get('/api/transactions/daily').then(response => setTransactionData(processTransactionData(response.data)));\n    axios.get('/api/nodes/locations').then(response => setNodeLocations(response.data.locations));\n    axios.get('/api/mining/info').then(response => setMiningInfo(response.data));\n  }, []);\n\n  // Function to process transaction data for chart\n  const processTransactionData = data => {\n    // Process and return data in a format suitable for react-chartjs-2\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"network-stats\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }, \"Total Nodes: \", nodeCount), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }, \"Average Block Time: \", averageBlockTime), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }, \"Total Transactions: \", transactionCount), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }, \"Blockchain Size: \", blockchainSize)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"charts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: transactionData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"node-map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MapContainer, {\n    center: [0, 0],\n    zoom: 2,\n    style: {\n      height: '400px',\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TileLayer, {\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }), nodeLocations.map((location, index) => /*#__PURE__*/React.createElement(Marker, {\n    key: index,\n    position: [location.lat, location.lng],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 25\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mining-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, \"Mining Difficulty: \", miningInfo.difficulty), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, \"Total Hash Rate: \", miningInfo.hashRate), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, \"Next Difficulty Adjustment: \", miningInfo.nextDifficulty)));\n};\nexport default Dashboard;","map":{"version":3,"names":["React","useState","useEffect","axios","Line","Pie","MapContainer","TileLayer","Marker","Dashboard","nodeCount","setNodeCount","averageBlockTime","setAverageBlockTime","transactionCount","setTransactionCount","blockchainSize","setBlockchainSize","transactionData","setTransactionData","nodeLocations","setNodeLocations","miningInfo","setMiningInfo","difficulty","hashRate","nextDifficulty","get","then","response","data","count","processTransactionData","locations","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","style","height","width","url","map","location","index","key","position","lat","lng"],"sources":["C:/Users/Neo/Music/bs/blockchain_project/client/src/pages/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Line, Pie } from 'react-chartjs-2';\r\nimport { MapContainer, TileLayer, Marker } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nconst Dashboard = () => {\r\n    const [nodeCount, setNodeCount] = useState(0);\r\n    const [averageBlockTime, setAverageBlockTime] = useState(0);\r\n    const [transactionCount, setTransactionCount] = useState(0);\r\n    const [blockchainSize, setBlockchainSize] = useState(0);\r\n    const [transactionData, setTransactionData] = useState({});\r\n    const [nodeLocations, setNodeLocations] = useState([]);\r\n    const [miningInfo, setMiningInfo] = useState({ difficulty: 0, hashRate: 0, nextDifficulty: 0 });\r\n\r\n    useEffect(() => {\r\n        // Fetch data here. Replace with your actual API endpoints and data processing logic\r\n        // Example:\r\n        axios.get('/api/nodes/count').then(response => setNodeCount(response.data.count));\r\n        axios.get('/api/blockchain/stats').then(response => {\r\n            // Process and set data for averageBlockTime, transactionCount, blockchainSize\r\n        });\r\n        axios.get('/api/transactions/daily').then(response => setTransactionData(processTransactionData(response.data)));\r\n        axios.get('/api/nodes/locations').then(response => setNodeLocations(response.data.locations));\r\n        axios.get('/api/mining/info').then(response => setMiningInfo(response.data));\r\n    }, []);\r\n\r\n    // Function to process transaction data for chart\r\n    const processTransactionData = (data) => {\r\n        // Process and return data in a format suitable for react-chartjs-2\r\n    };\r\n\r\n    return (\r\n        <div className=\"dashboard\">\r\n            {/* Network Statistics */}\r\n            <div className=\"network-stats\">\r\n                <p>Total Nodes: {nodeCount}</p>\r\n                <p>Average Block Time: {averageBlockTime}</p>\r\n                <p>Total Transactions: {transactionCount}</p>\r\n                <p>Blockchain Size: {blockchainSize}</p>\r\n            </div>\r\n\r\n            {/* Graphs and Charts */}\r\n            <div className=\"charts\">\r\n                <Line data={transactionData} />\r\n                {/* Add more charts as needed */}\r\n            </div>\r\n\r\n            {/* Node Map */}\r\n            <div className=\"node-map\">\r\n                <MapContainer center={[0, 0]} zoom={2} style={{ height: '400px', width: '100%' }}>\r\n                    <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n                    {nodeLocations.map((location, index) => (\r\n                        <Marker key={index} position={[location.lat, location.lng]} />\r\n                    ))}\r\n                </MapContainer>\r\n            </div>\r\n\r\n            {/* Mining Information */}\r\n            <div className=\"mining-info\">\r\n                <p>Mining Difficulty: {miningInfo.difficulty}</p>\r\n                <p>Total Hash Rate: {miningInfo.hashRate}</p>\r\n                <p>Next Difficulty Adjustment: {miningInfo.nextDifficulty}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Dashboard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}