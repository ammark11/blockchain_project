{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Neo\\\\Music\\\\bs\\\\blockchain_project\\\\client\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dashboard() {\n  _s();\n  const [nodeCount, setNodeCount] = useState(0);\n  const [transactionCount, setTransactionCount] = useState(0);\n  const [ipAddresses, setIpAddresses] = useState([]);\n  const [countryInfo, setCountryInfo] = useState({});\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    // Fetch node count from NodesDashboard endpoint\n    axios.get('http://127.0.0.1:5000/get_nodes').then(response => setNodeCount(response.data.nodes.length)).catch(error => console.error('Error fetching nodes:', error));\n\n    // Fetch transaction count from lists endpoint\n    axios.get(\"http://localhost:5000/get_chain\").then(response => {\n      const transactions = response.data.chain.flatMap(block => block.transactions);\n      setTransactionCount(transactions.length);\n    }).catch(error => console.error('Error fetching transactions:', error));\n\n    // Fetch IP address list from your source\n    axios.get('YOUR_IP_ADDRESS_ENDPOINT') // Replace with your actual endpoint\n    .then(response => setIpAddresses(response.data.n)).catch(error => console.error('Error fetching IP addresses:', error));\n  }, []);\n  useEffect(() => {\n    // When the list of IP addresses changes, fetch country information for each IP\n    if (ipAddresses.length === 0) return;\n    setLoading(true);\n    const countryDataPromises = ipAddresses.map(ip => {\n      return axios.get(`https://ipinfo.io/${ip}/json`).then(response => ({\n        ip,\n        country: response.data.country || 'Unknown'\n      })).catch(error => ({\n        ip,\n        country: 'Error'\n      }));\n    });\n    Promise.all(countryDataPromises).then(countryData => {\n      const countryDataMap = {};\n      countryData.forEach(item => {\n        countryDataMap[item.ip] = item.country;\n      });\n      setCountryInfo(countryDataMap);\n    }).catch(error => console.error('Error fetching country information:', error)).finally(() => setLoading(false));\n  }, [ipAddresses]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-item animated\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Registered Nodes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"count\",\n        children: nodeCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-item animated\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Transactions Occurred\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"count\",\n        children: transactionCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-item animated\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"IP Countries\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading country information...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: Object.keys(countryInfo).map(ip => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"IP: \", ip, \", Country: \", countryInfo[ip]]\n        }, ip, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"0CX/QTkyUdglYgvVOK31d3Qpe4A=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Dashboard","_s","nodeCount","setNodeCount","transactionCount","setTransactionCount","ipAddresses","setIpAddresses","countryInfo","setCountryInfo","loading","setLoading","get","then","response","data","nodes","length","catch","error","console","transactions","chain","flatMap","block","n","countryDataPromises","map","ip","country","Promise","all","countryData","countryDataMap","forEach","item","finally","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","_c","$RefreshReg$"],"sources":["C:/Users/Neo/Music/bs/blockchain_project/client/src/pages/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Dashboard() {\r\n  const [nodeCount, setNodeCount] = useState(0);\r\n  const [transactionCount, setTransactionCount] = useState(0);\r\n  const [ipAddresses, setIpAddresses] = useState([]);\r\n  const [countryInfo, setCountryInfo] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Fetch node count from NodesDashboard endpoint\r\n    axios.get('http://127.0.0.1:5000/get_nodes')\r\n      .then(response => setNodeCount(response.data.nodes.length))\r\n      .catch(error => console.error('Error fetching nodes:', error));\r\n\r\n    // Fetch transaction count from lists endpoint\r\n    axios.get(\"http://localhost:5000/get_chain\")\r\n      .then(response => {\r\n        const transactions = response.data.chain.flatMap(block => block.transactions);\r\n        setTransactionCount(transactions.length);\r\n      })\r\n      .catch(error => console.error('Error fetching transactions:', error));\r\n\r\n    // Fetch IP address list from your source\r\n    axios.get('YOUR_IP_ADDRESS_ENDPOINT') // Replace with your actual endpoint\r\n      .then(response => setIpAddresses(response.data.n))\r\n      .catch(error => console.error('Error fetching IP addresses:', error));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // When the list of IP addresses changes, fetch country information for each IP\r\n    if (ipAddresses.length === 0) return;\r\n\r\n    setLoading(true);\r\n    const countryDataPromises = ipAddresses.map(ip => {\r\n      return axios.get(`https://ipinfo.io/${ip}/json`)\r\n        .then(response => ({ ip, country: response.data.country || 'Unknown' }))\r\n        .catch(error => ({ ip, country: 'Error' }));\r\n    });\r\n\r\n    Promise.all(countryDataPromises)\r\n      .then(countryData => {\r\n        const countryDataMap = {};\r\n        countryData.forEach(item => {\r\n          countryDataMap[item.ip] = item.country;\r\n        });\r\n        setCountryInfo(countryDataMap);\r\n      })\r\n      .catch(error => console.error('Error fetching country information:', error))\r\n      .finally(() => setLoading(false));\r\n  }, [ipAddresses]);\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <div className=\"dashboard-item animated\">\r\n        <h2>Registered Nodes</h2>\r\n        <p className=\"count\">{nodeCount}</p>\r\n      </div>\r\n      <div className=\"dashboard-item animated\">\r\n        <h2>Transactions Occurred</h2>\r\n        <p className=\"count\">{transactionCount}</p>\r\n      </div>\r\n      {/* Add more dashboard items as needed */}\r\n      <div className=\"dashboard-item animated\">\r\n        <h2>IP Countries</h2>\r\n        {loading ? (\r\n          <p>Loading country information...</p>\r\n        ) : (\r\n          <ul>\r\n            {Object.keys(countryInfo).map(ip => (\r\n              <li key={ip}>\r\n                IP: {ip}, Country: {countryInfo[ip]}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}