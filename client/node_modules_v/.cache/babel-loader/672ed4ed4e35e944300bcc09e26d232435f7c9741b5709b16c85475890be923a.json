{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Neo\\\\Music\\\\bs\\\\blockchain_project\\\\client\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dashboard() {\n  _s();\n  const [nodeCount, setNodeCount] = useState(0);\n  const [transactionCount, setTransactionCount] = useState(0);\n  const [ipAddresses, setIpAddresses] = useState([]);\n  const [countryInfo, setCountryInfo] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  // Replace 'YOUR_IPSTACK_API_KEY' with your actual API key\n  const IPSTACK_API_KEY = 'YOUR_IPSTACK_API_KEY';\n  useEffect(() => {\n    // Fetch node count from NodesDashboard endpoint\n    axios.get('http://127.0.0.1:5000/get_nodes').then(response => setNodeCount(response.data.nodes.length)).catch(error => console.error('Error fetching nodes:', error));\n\n    // Fetch transaction count from lists endpoint\n    axios.get(\"http://localhost:5000/get_chain\").then(response => {\n      const transactions = response.data.chain.flatMap(block => block.transactions);\n      setTransactionCount(transactions.length);\n    }).catch(error => console.error('Error fetching transactions:', error));\n\n    // Fetch IP address list from your source\n    axios.get('http://127.0.0.1:5000/get_nodes') // Replace with your actual endpoint\n    .then(response => setIpAddresses(response.data.nodes)).catch(error => console.error('Error fetching IP addresses:', error));\n  }, []);\n  useEffect(() => {\n    // When the list of IP addresses changes, fetch country information for each IP\n    if (ipAddresses.length === 0) return;\n    setLoading(true);\n    const countryDataPromises = ipAddresses.map(ip => {\n      return axios.get(`http://api.ipstack.com/${ip}?access_key=${IPSTACK_API_KEY}`).then(response => ({\n        ip,\n        country: response.data.country_name || 'Unknown',\n        latitude: response.data.latitude || 0,\n        longitude: response.data.longitude || 0\n      })).catch(error => ({\n        ip,\n        country: 'Error',\n        latitude: 0,\n        longitude: 0\n      }));\n    });\n    Promise.all(countryDataPromises).then(countryData => {\n      const countryDataMap = {};\n      countryData.forEach(item => {\n        countryDataMap[item.ip] = item;\n      });\n      setCountryInfo(countryDataMap);\n    }).catch(error => console.error('Error fetching country information:', error)).finally(() => setLoading(false));\n  }, [ipAddresses]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-item animated\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Registered Nodes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"count\",\n        children: nodeCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-item animated\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Transactions Occurred\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"count\",\n        children: transactionCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-item animated\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"IP Countries Map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading country information...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(MapContainer, {\n        center: [0, 0],\n        zoom: 2,\n        style: {\n          height: '400px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n          attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), Object.keys(countryInfo).map(ip => /*#__PURE__*/_jsxDEV(Marker, {\n          position: [countryInfo[ip].latitude, countryInfo[ip].longitude],\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: [\"IP: \", ip, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 27\n            }, this), \"Country: \", countryInfo[ip].country]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this)\n        }, ip, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"0CX/QTkyUdglYgvVOK31d3Qpe4A=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","MapContainer","TileLayer","Marker","Popup","jsxDEV","_jsxDEV","Dashboard","_s","nodeCount","setNodeCount","transactionCount","setTransactionCount","ipAddresses","setIpAddresses","countryInfo","setCountryInfo","loading","setLoading","IPSTACK_API_KEY","get","then","response","data","nodes","length","catch","error","console","transactions","chain","flatMap","block","countryDataPromises","map","ip","country","country_name","latitude","longitude","Promise","all","countryData","countryDataMap","forEach","item","finally","className","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","style","height","url","attribution","Object","keys","position","_c","$RefreshReg$"],"sources":["C:/Users/Neo/Music/bs/blockchain_project/client/src/pages/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\n\r\nfunction Dashboard() {\r\n  const [nodeCount, setNodeCount] = useState(0);\r\n  const [transactionCount, setTransactionCount] = useState(0);\r\n  const [ipAddresses, setIpAddresses] = useState([]);\r\n  const [countryInfo, setCountryInfo] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Replace 'YOUR_IPSTACK_API_KEY' with your actual API key\r\n  const IPSTACK_API_KEY = 'YOUR_IPSTACK_API_KEY';\r\n\r\n  useEffect(() => {\r\n    // Fetch node count from NodesDashboard endpoint\r\n    axios.get('http://127.0.0.1:5000/get_nodes')\r\n      .then(response => setNodeCount(response.data.nodes.length))\r\n      .catch(error => console.error('Error fetching nodes:', error));\r\n\r\n    // Fetch transaction count from lists endpoint\r\n    axios.get(\"http://localhost:5000/get_chain\")\r\n      .then(response => {\r\n        const transactions = response.data.chain.flatMap(block => block.transactions);\r\n        setTransactionCount(transactions.length);\r\n      })\r\n      .catch(error => console.error('Error fetching transactions:', error));\r\n\r\n    // Fetch IP address list from your source\r\n    axios.get('http://127.0.0.1:5000/get_nodes') // Replace with your actual endpoint\r\n      .then(response => setIpAddresses(response.data.nodes))\r\n      .catch(error => console.error('Error fetching IP addresses:', error));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // When the list of IP addresses changes, fetch country information for each IP\r\n    if (ipAddresses.length === 0) return;\r\n\r\n    setLoading(true);\r\n    const countryDataPromises = ipAddresses.map(ip => {\r\n      return axios.get(`http://api.ipstack.com/${ip}?access_key=${IPSTACK_API_KEY}`)\r\n        .then(response => ({\r\n          ip,\r\n          country: response.data.country_name || 'Unknown',\r\n          latitude: response.data.latitude || 0,\r\n          longitude: response.data.longitude || 0,\r\n        }))\r\n        .catch(error => ({\r\n          ip,\r\n          country: 'Error',\r\n          latitude: 0,\r\n          longitude: 0,\r\n        }));\r\n    });\r\n\r\n    Promise.all(countryDataPromises)\r\n      .then(countryData => {\r\n        const countryDataMap = {};\r\n        countryData.forEach(item => {\r\n          countryDataMap[item.ip] = item;\r\n        });\r\n        setCountryInfo(countryDataMap);\r\n      })\r\n      .catch(error => console.error('Error fetching country information:', error))\r\n      .finally(() => setLoading(false));\r\n  }, [ipAddresses]);\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <div className=\"dashboard-item animated\">\r\n        <h2>Registered Nodes</h2>\r\n        <p className=\"count\">{nodeCount}</p>\r\n      </div>\r\n      <div className=\"dashboard-item animated\">\r\n        <h2>Transactions Occurred</h2>\r\n        <p className=\"count\">{transactionCount}</p>\r\n      </div>\r\n      {/* Add more dashboard items as needed */}\r\n      <div className=\"dashboard-item animated\">\r\n        <h2>IP Countries Map</h2>\r\n        {loading ? (\r\n          <p>Loading country information...</p>\r\n        ) : (\r\n          <MapContainer center={[0, 0]} zoom={2} style={{ height: '400px' }}>\r\n            <TileLayer\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n            {Object.keys(countryInfo).map(ip => (\r\n              <Marker\r\n                key={ip}\r\n                position={[countryInfo[ip].latitude, countryInfo[ip].longitude]}\r\n              >\r\n                <Popup>\r\n                  IP: {ip}<br />\r\n                  Country: {countryInfo[ip].country}\r\n                </Popup>\r\n              </Marker>\r\n            ))}\r\n          </MapContainer>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}